#!/usr/bin/env python
#-*- coding: utf-8 -*-

import os,sys
import utils.preprocess as pre
from threading import Thread
from Queue import Queue

FRODOCK = os.environ["FRODOCK"]
ADFRSUITE = os.environ['ADFRSUITE']

#run FRODOCK
def frodock(site):
    print ('FRODOCK docking')
    #working directory is in filepath_frodock
    frodockgrid_intel = '%s/bin/frodockgrid' % FRODOCK
    frodockgrid_gcc = '%s/bin/frodockgrid_gcc' % FRODOCK
    if os.path.exists(frodockgrid_intel):
        frodockgrid = frodockgrid_intel
    elif os.path.exists(frodockgrid_gcc):
        frodockgrid = frodockgrid_gcc
    else:
        print "frodockgrid is not found"
        sys.exit()
    os.system('echo STAGE-1 Creation of receptor vdw potential map')
    os.system(frodockgrid + ' receptor.pdb -o receptor_W.ccp4')

    os.system('echo STAGE-2 Creation of the receptor electrostatic potential map')
    os.system(frodockgrid + ' receptor.pdb -o receptor_E.ccp4 -m 1 -t E')

    os.system('echo STAGE-3 Creation of the receptor desolvation potential map')
    os.system(frodockgrid + ' receptor.pdb -o receptor_DS.ccp4 -m 3')

    os.system('echo STAGE-4 Creation of the target desolvation potential map')
    os.system(frodockgrid + ' target.pdb -o target_DS.ccp4 -m 3')

    frodock_intel = '%s/bin/frodock' % FRODOCK
    frodock_gcc = '%s/bin/frodock_gcc' % FRODOCK
    if os.path.exists(frodock_intel):
        frodock_docking = frodock_intel
    elif os.path.exists(frodock_gcc):
        frodock_docking = frodock_gcc
    else:
        print "frodock is not found"
        sys.exit()
    os.system('echo STAGE-5 Performing the docking')
    os.system(frodock_docking + ' receptor_ASA.pdb target_ASA.pdb -w receptor_W.ccp4 -e receptor_E.ccp4 '
                        '--th 10 -d receptor_DS.ccp4,target_DS.ccp4 -t E -o dock.dat --around %s' % site)

    frodockcluster_intel = '%s/bin/frodockcluster' % FRODOCK
    frodockcluster_gcc = '%s/bin/frodockcluster_gcc' % FRODOCK
    if os.path.exists(frodockcluster_intel):
        frodockcluster = frodockcluster_intel
    elif os.path.exists(frodockcluster_gcc):
        frodockcluster = frodockcluster_gcc
    else:
        print "frodockcluster is not found"
        sys.exit()
    os.system('echo STAGE-6 Clustering and visualization of predictions')
    os.system(frodockcluster + ' dock.dat target.pdb -o clust_dock_4.dat -d 4 --nc 100000')

    frodockview_intel = '%s/bin/frodockview' % FRODOCK
    frodockview_gcc = '%s/bin/frodockview_gcc' % FRODOCK
    if os.path.exists(frodockview_intel):
        frodockview = frodockview_intel
    elif os.path.exists(frodockview_gcc):
        frodockview = frodockview_gcc
    else:
        print "frodockview is not found"
        sys.exit()
    os.system('echo STAGE-7 Coordinate generation of the best predicted solutions')
    os.system(frodockview + ' clust_dock_4.dat -p target.pdb >> frodock_score.txt')


#filter the conformations generated by FRODOCK
def filter_frodock(cpu, lig_locate_num):
    #os.system('head -n 300 frodock_score.txt > frodock_score_25.txt')
    pdb_num = len(open('frodock_score.txt', 'ru').readlines())

    #preprocess files
    pre.preprocess_pdb_element('receptor.pdb', 'rec_lig.pdb')
    pre.preprocess_pdb_element('target.pdb', 'target_lig.pdb')
    pre.obabel_convert_format('pdb', 'rec_lig.pdb', 'sdf', 'rec_lig.sdf')
    pre.obabel_convert_format('pdb', 'rec_lig.pdb', 'sdf', 'rec_lig_H.sdf', addH=True)
    pre.obabel_convert_format('sdf', 'rec_lig_H.sdf', 'pdb', 'rec_lig_H.pdb')
    pre.obabel_convert_format('pdb', 'target_lig.pdb', 'sdf', 'target_lig.sdf')
    pre.obabel_convert_format('pdb', 'target_lig.pdb', 'sdf', 'target_lig_H.sdf', addH=True)
    pre.obabel_convert_format('sdf', 'target_lig_H.sdf', 'pdb', 'target_lig_H.pdb')
    os.system(ADFRSUITE + '/bin/reduce -OH -HIS -NOADjust -NUClear receptor.pdb'
                       ' | grep ATOM 1> receptor_H.pdb 2>> addH_log')
    os.system(ADFRSUITE + '/bin/reduce -OH -HIS -NOADjust -NUClear target.pdb'
                       ' | grep ATOM 1> target_H.pdb 2>> addH_log')
    os.system('grep HETATM rec_lig_H.pdb >> receptor_H.pdb')
    os.system('grep HETATM target_lig_H.pdb >> target_H.pdb')
    rec_site = pre.lig_around_residue('receptor_H.pdb', 'rec_site')
    lig_site = pre.lig_around_residue('target_H.pdb', 'lig_site')
    rec_site_info_list = get_rec_site_info(rec_site, 'receptor_H.pdb')
    filepath_vina = 'vina'

    #preprocess the ligand with two possible locations for linker
    filepath_rec_lig_1 = 'rec_lig_1'
    filepath_rec_lig_2 = 'rec_lig_2'
    if lig_locate_num > 1:
        pre.obabel_convert_format('sdf', 'rec_lig_1.sdf', 'pdb', 'rec_lig_1.pdb')
        pre.obabel_convert_format('sdf', 'rec_lig_2.sdf', 'pdb', 'rec_lig_2.pdb')
        if os.path.exists('%s/vina' % filepath_rec_lig_1) == False:
            os.makedirs('%s/vina' % filepath_rec_lig_1)
        if os.path.exists('%s/vina' % filepath_rec_lig_2) == False:
            os.makedirs('%s/vina' % filepath_rec_lig_2)
    else:
        if os.path.exists(filepath_vina) == False:
            os.makedirs(filepath_vina)
        else:
            os.system('rm %s/*' % filepath_vina)
    #Run addH, interface_residue, obenergy, vina, voromqa
    filtering(cpu, pdb_num, rec_site_info_list, lig_site, lig_locate_num, filepath_rec_lig_1, filepath_rec_lig_2)

    #preprocess for clustering
    results_voromqa= 'results_voromqa'
    file_voromqa_score_out = 'results_voromqa_interface_rank'
    pre.rank_voromqa(results_voromqa, file_voromqa_score_out)
    with open(file_voromqa_score_out, 'rb') as voromqa_score:
        score_lines = voromqa_score.read().splitlines()
    filepath_cluster = 'cluster'
    if os.path.exists(filepath_cluster) == False:
        os.makedirs(filepath_cluster)
    else:
        os.system('rm %s/*' % filepath_cluster)
    pdb_model = ''
    # The ligand with only one location for linker
    if lig_locate_num == 1:
        vina_dict = {}
        vina_score_filter = '%s/score_all_top1' % filepath_vina
        with open(vina_score_filter, 'rb') as file_score:
            vina_score_lines = file_score.read().splitlines()
        for vina_score_line in vina_score_lines:
            items = vina_score_line.split()[0].split('_')
            vina_dict['%s' % items[0]] = items[1]
    else:
        vina_dict_1 = {}
        vina_score_filter_1 = '%s/%s/score_all_top1' % (filepath_rec_lig_1, filepath_vina)
        with open(vina_score_filter_1, 'rb') as file_score:
            vina_score_lines_1 = file_score.read().splitlines()
        for vina_score_line_1 in vina_score_lines_1:
            items = vina_score_line_1.split()[0].split('_')
            vina_dict_1['%s' % items[0]] = items[1]
        vina_dict_2 = {}
        vina_score_filter_2 = '%s/%s/score_all_top1' % (filepath_rec_lig_2, filepath_vina)
        with open(vina_score_filter_2, 'rb') as file_score:
            vina_score_lines_2 = file_score.read().splitlines()
        for vina_score_line_2 in vina_score_lines_2:
            items = vina_score_line_2.split()[0].split('_')
            vina_dict_2['%s' % items[0]] = items[1]
    for score_line in score_lines:
        score_rank = score_line.split()[0]
        model_nolig_pdb_id = score_line.split()[1].split('.')[1]
        os.system('grep ATOM model_nolig.%s.pdb > %s/model.%s.pdb' % (model_nolig_pdb_id, filepath_cluster, score_rank))
        pre.preprocess_cluster('%s/model.%s.pdb' % (filepath_cluster, score_rank),
                               '%s/model.%s_chainxseg.pdb' % (filepath_cluster, score_rank))
        pdb_model += 'model.%s_chainxseg.pdb\n' % score_rank
        #merge the best protac and protein
        # The ligand with only one location for linker
        if lig_locate_num == 1:
            protac_best_num = vina_dict['%s' % model_nolig_pdb_id]
            protac_best_mol2 = 'protac_%s_%s.mol2' % (model_nolig_pdb_id, protac_best_num)
            os.system('cp %s %s/protac_%s.mol2' % (protac_best_mol2, filepath_cluster, score_rank))
            pre.obabel_convert_format('mol2', '%s/protac_%s.mol2' % (filepath_cluster, score_rank),
                                      'pdb', '%s/protac_%s.pdb' % (filepath_cluster, score_rank))
            pre.alter_chain('%s/protac_%s.pdb' % (filepath_cluster, score_rank),
                            '%s/protac_%s.pdb' % (filepath_cluster, score_rank), 'X')
            os.system('cat %s/model.%s.pdb %s/protac_%s.pdb > %s/model_merge_%s.pdb' %
                      (filepath_cluster, score_rank, filepath_cluster, score_rank, filepath_cluster, score_rank))
        else:
            os.system('cat %s/model.%s.pdb > %s/model_merge_%s.pdb' %
                      (filepath_cluster, score_rank, filepath_cluster, score_rank))
            if vina_dict_1.has_key(model_nolig_pdb_id):
                protac_best_num_1 = vina_dict_1['%s' % model_nolig_pdb_id]
                protac_best_mol2_1 = '%s/protac_%s_%s.mol2' % (filepath_rec_lig_1, model_nolig_pdb_id, protac_best_num_1)
                os.system('cp %s %s/protac_%s_1.mol2' % (protac_best_mol2_1, filepath_cluster, score_rank))
                pre.obabel_convert_format('mol2', '%s/protac_%s_1.mol2' % (filepath_cluster, score_rank),
                                          'pdb', '%s/protac_%s_1.pdb' % (filepath_cluster, score_rank))
                pre.alter_chain('%s/protac_%s_1.pdb' % (filepath_cluster, score_rank),
                                '%s/protac_%s_1.pdb' % (filepath_cluster, score_rank), 'X')
                os.system('cat %s/protac_%s_1.pdb >> %s/model_merge_%s.pdb' %
                          (filepath_cluster, score_rank, filepath_cluster, score_rank))
            if vina_dict_2.has_key(model_nolig_pdb_id):
                protac_best_num_2 = vina_dict_2['%s' % model_nolig_pdb_id]
                protac_best_mol2_2 = '%s/protac_%s_%s.mol2' % (filepath_rec_lig_2, model_nolig_pdb_id, protac_best_num_2)
                os.system('cp %s %s/protac_%s_2.mol2' % (protac_best_mol2_2, filepath_cluster, score_rank))
                pre.obabel_convert_format('mol2', '%s/protac_%s_2.mol2' % (filepath_cluster, score_rank),
                                          'pdb', '%s/protac_%s_2.pdb' % (filepath_cluster, score_rank))
                pre.alter_chain('%s/protac_%s_2.pdb' % (filepath_cluster, score_rank),
                                '%s/protac_%s_2.pdb' % (filepath_cluster, score_rank), 'Y')
                os.system('cat %s/protac_%s_2.pdb >> %s/model_merge_%s.pdb' %
                          (filepath_cluster, score_rank, filepath_cluster, score_rank))

    with open('%s/pdb_model.list' % filepath_cluster, 'wb') as file_out:
        file_out.write(pdb_model)

    #cluster
    pre.cluster('pdb_model.list', filepath_cluster, cpu)

    #Output results
    results_frodock= 'results_frodock.txt'
    cluster_top3 = 'cluster_top3.txt'
    filepath_frodock_results = '../frodock_results'
    if os.path.exists(filepath_frodock_results) == False:
        os.makedirs(filepath_frodock_results)
    os.system('awk \'{print $1\" \"$11}\' %s > %s' % (file_voromqa_score_out, results_frodock))
    pre.extract_top3_cluster('%s/cluster_5_3_model_process' % filepath_cluster,
                             '%s/cluster_5_3_results_top1' % filepath_cluster, results_frodock,
                             '%s/%s' % (filepath_frodock_results, cluster_top3))
    cp_cluster='cp %s/cluster_5_3_model_process %s/cluster_all' % (filepath_cluster, filepath_frodock_results)
    os.system(cp_cluster)
    with open('%s/%s' % (filepath_frodock_results, cluster_top3), 'rb') as file:
        cluster_lines = file.read().splitlines()
    for cluster_line in cluster_lines:
        rank = cluster_line.split()[0]
        cluster_num = cluster_line.split()[-1]
        os.system('cp %s/model_merge_%s.pdb %s/cluster_%s_%s.pdb' % (
            filepath_cluster, rank, filepath_frodock_results, cluster_num, rank))
    filepath_frodock_results_all = '../frodock_results/all'
    if os.path.exists(filepath_frodock_results_all) == False:
        os.makedirs(filepath_frodock_results_all)
    os.system('cp %s/model_merge_*.pdb %s %s' % (filepath_cluster, results_frodock, filepath_frodock_results_all))
    os.system('rm target_lig_*.pdb lig_*.sdf model_nolig.*.pdb *pdbqt protac_*.mol2')


#get the site information of receptor
def get_rec_site_info(rec_site, rec_pdb):
    with open(rec_pdb, 'rb') as rec_pdb_file:
        rec_pdb_lines = rec_pdb_file.read().splitlines()
    rec_site_info_list = []
    rec_dict = {}
    for rec_pdb_line in rec_pdb_lines:
        if rec_pdb_line[:4] == 'ATOM':
            chain_id = rec_pdb_line[21]
            res_number = rec_pdb_line[22:27].strip()
            res = chain_id + res_number
            atom_number = rec_pdb_line[12:16].strip()
            x = rec_pdb_line[30:38].strip()
            y = rec_pdb_line[38:46].strip()
            z = rec_pdb_line[46:54].strip()
            rec_dict['res'] = res
            rec_dict['atom_number'] = atom_number
            rec_dict['x'] = float(x)
            rec_dict['y'] = float(y)
            rec_dict['z'] = float(z)
            if res in rec_site:
                rec_site_info_list.append(rec_dict.copy())
    return rec_site_info_list

#get the interface residue
def interface_frodock(rec_site_info_list, lig_site, lig_pdb):
    with open(lig_pdb, 'rb') as lig_pdb_file:
        lig_pdb_lines = lig_pdb_file.read().splitlines()
    lig_dict = {}
    lig_list = []
    lig_site_info_list = []
    rec_interface_list = []
    lig_interface_list = []
    for lig_pdb_line in lig_pdb_lines:
        if lig_pdb_line[:4] == 'ATOM':
            chain_id = lig_pdb_line[21]
            res_number = lig_pdb_line[22:27].strip()
            res = chain_id + res_number
            atom_number = lig_pdb_line[12:16].strip()
            x = lig_pdb_line[30:38].strip()
            y = lig_pdb_line[38:46].strip()
            z = lig_pdb_line[46:54].strip()
            lig_dict['res'] = res
            lig_dict['atom_number'] = atom_number
            lig_dict['x'] = float(x)
            lig_dict['y'] = float(y)
            lig_dict['z'] = float(z)
            if res in lig_site:
                lig_site_info_list.append(lig_dict.copy())
            lig_list.append(lig_dict.copy())
    for i in range(len(lig_site_info_list)):
        lig_res = lig_site_info_list[i]['res']
        lig_x = lig_site_info_list[i]['x']
        lig_y = lig_site_info_list[i]['y']
        lig_z = lig_site_info_list[i]['z']
        for j in range(len(rec_site_info_list)):
            rec_res = rec_site_info_list[j]['res']
            rec_x = rec_site_info_list[j]['x']
            rec_y = rec_site_info_list[j]['y']
            rec_z = rec_site_info_list[j]['z']
            length = (rec_x - lig_x) * (rec_x - lig_x) + (rec_y - lig_y) * (rec_y - lig_y) + (rec_z - lig_z) * (
                    rec_z - lig_z)
            if length <= 25:
                if rec_res not in rec_interface_list:
                    rec_interface_list.append(rec_res)
                if lig_res not in lig_interface_list:
                    lig_interface_list.append(lig_res)
    if len(rec_interface_list) > 0:
        content = '%s %s %s' % (lig_pdb, len(lig_interface_list), len(rec_interface_list))
    else:
        content = '%s No No' % (lig_pdb)
    return content

#Run addH, interface_residue, obenergy, vina, voromqa in multithreading
def filtering(cpu, pdb_num, rec_site_info_list, lig_site, lig_locate_num, filepath_rec_lig_1, filepath_rec_lig_2):
    filtering_queue = Filtering_queue(pdb_num, rec_site_info_list, lig_site,
                                      lig_locate_num, filepath_rec_lig_1, filepath_rec_lig_2)
    queue = Queue(maxsize=int(cpu))
    producer_thread = Thread(target=filtering_queue.producer, args=(queue,))
    producer_thread.daemon = True
    producer_thread.start()

    for index in range(int(cpu)):
        consumer_thread = Thread(target=filtering_queue.consumer, args=(queue,))
        consumer_thread.daemon = True
        consumer_thread.start()
    queue.join()

#The queue class for addH, interface_residue, obenergy, vina, voromqa
class Filtering_queue:
    def __init__(self, pdb_num, rec_site_info_list, lig_site, lig_locate_num, filepath_rec_lig_1, filepath_rec_lig_2):
        self.pdb_num = int(pdb_num)
        self.rec_site_info_list = rec_site_info_list
        self.lig_site = lig_site
        self.filepath_vina = 'vina'
        self.lig_locate_num = lig_locate_num
        self.filepath_rec_lig_1 = filepath_rec_lig_1
        self.filepath_rec_lig_2 = filepath_rec_lig_2
        self.filepath_vina_1 = '%s/vina' % filepath_rec_lig_1
        self.filepath_vina_2 = '%s/vina' % filepath_rec_lig_2


    def producer(self,in_q):
        while in_q.full() is False:
            for i in range(1, self.pdb_num+1):
                in_q.put(i)

    def consumer(self, in_q):
        while in_q.empty() is not True:
            pdb_num = in_q.get()
            #add H
            target_pdb = 'target_%s.pdb' % pdb_num
            target_addH_pdb = 'target_%s_addH.pdb' % pdb_num
            pre.addH_protein(target_pdb, target_addH_pdb)

            #get the interface residue
            content_interface = interface_frodock(self.rec_site_info_list, self.lig_site, target_addH_pdb)
            filter_num = pre.filter_interface_residue(content_interface)

            #get the PROTAC conformations
            if filter_num != 'none':
                target_lig_pdb = 'target_lig_%s.pdb' % pdb_num
                pre.preprocess_pdb_element(target_addH_pdb, target_lig_pdb)
                # The ligand with only one location for linker
                if self.lig_locate_num == 1:
                    os.system('cat rec_lig.pdb >> %s' % target_lig_pdb)
                    lig_sdf = 'lig_%s.sdf' % pdb_num
                    pre.obabel_convert_format('pdb', target_lig_pdb, 'sdf', lig_sdf)
                    protac_sdf = 'protac_%s.sdf' % pdb_num
                    num_confor = pre.getConformers('rec_lig.sdf', 'target_lig.sdf', 'protac.smi', lig_sdf, protac_sdf)
                    #Vina and obenergy
                    if int(num_confor) > 0 :
                        #preprocess files for obenergy and vina
                        protac_mol2 = 'protac_%s.mol2' % (pdb_num)
                        pre.obabel_convert_format('sdf', protac_sdf, 'mol2', protac_mol2)
                        model_nolig_pdb = 'model_nolig.%s.pdb' % (pdb_num)
                        os.system('grep ATOM receptor_H.pdb > %s' % (model_nolig_pdb))
                        os.system('grep ATOM %s >> %s' % (target_addH_pdb, model_nolig_pdb))
                        #obenergy and vina
                        num_obenergy_vina = pre.obenergy_vina(pdb_num, self.filepath_vina, '.')
                        #voromqa
                        if int(num_obenergy_vina) > 0:
                            pre.voromqa(model_nolig_pdb)
                #The ligand with two possible location for linker
                else:
                    target_lig_pdb_1 = '%s/%s' % (self.filepath_rec_lig_1, target_lig_pdb)
                    os.system('cat %s rec_lig_1.pdb > %s'
                              % (target_lig_pdb, target_lig_pdb_1))
                    lig_sdf_1 = '%s/lig_%s.sdf' % (self.filepath_rec_lig_1, pdb_num)
                    pre.obabel_convert_format('pdb', target_lig_pdb_1, 'sdf', lig_sdf_1)
                    protac_sdf_1 = '%s/protac_%s.sdf' % (self.filepath_rec_lig_1, pdb_num)
                    num_confor_1 = pre.getConformers('rec_lig_1.sdf', 'target_lig.sdf', 'protac.smi',
                                                   lig_sdf_1, protac_sdf_1)
                    num_obenergy_vina_1 = 0
                    num_obenergy_vina_2 = 0
                    model_nolig_pdb = 'model_nolig.%s.pdb' % (pdb_num)
                    if int(num_confor_1) > 0 :
                        #preprocess files for obenergy and vina
                        protac_mol2_1 = '%s/protac_%s.mol2' % (self.filepath_rec_lig_1, pdb_num)
                        pre.obabel_convert_format('sdf', protac_sdf_1, 'mol2', protac_mol2_1)
                        os.system('grep ATOM receptor_H.pdb > %s' % (model_nolig_pdb))
                        os.system('grep ATOM %s >> %s' % (target_addH_pdb, model_nolig_pdb))
                        #obenergy and vina
                        num_obenergy_vina_1 = pre.obenergy_vina(pdb_num, self.filepath_vina_1, self.filepath_rec_lig_1)

                    target_lig_pdb_2 = '%s/%s' % (self.filepath_rec_lig_2, target_lig_pdb)
                    os.system('cat %s rec_lig_2.pdb > %s'
                              % (target_lig_pdb, target_lig_pdb_2))
                    lig_sdf_2 = '%s/lig_%s.sdf' % (self.filepath_rec_lig_2, pdb_num)
                    pre.obabel_convert_format('pdb', target_lig_pdb_2, 'sdf', lig_sdf_2)
                    protac_sdf_2 = '%s/protac_%s.sdf' % (self.filepath_rec_lig_2, pdb_num)
                    num_confor_2 = pre.getConformers('rec_lig_2.sdf', 'target_lig.sdf', 'protac.smi',
                                                   lig_sdf_2, protac_sdf_2)
                    if int(num_confor_2) > 0 :
                        #preprocess files for obenergy and vina
                        protac_mol2_2 = '%s/protac_%s.mol2' % (self.filepath_rec_lig_2, pdb_num)
                        pre.obabel_convert_format('sdf', protac_sdf_2, 'mol2', protac_mol2_2)
                        os.system('grep ATOM receptor_H.pdb > %s' % (model_nolig_pdb))
                        os.system('grep ATOM %s >> %s' % (target_addH_pdb, model_nolig_pdb))
                        #obenergy and vina
                        num_obenergy_vina_2 = pre.obenergy_vina(pdb_num, self.filepath_vina_2, self.filepath_rec_lig_2)
                    # voromqa
                    if int(num_obenergy_vina_1) > 0 or int(num_obenergy_vina_2) > 0:
                        pre.voromqa(model_nolig_pdb)

            in_q.task_done()

